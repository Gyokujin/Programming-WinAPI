// 큐(Queue) : 자료구조 큐의 이론을 바탕으로, 윈도우즈에서도 특정한 목적과 응용을 위해 설계 및 사용한다. 종류로는 메시지 큐, 프린터 큐, 작업 큐, 스레드 풀 큐, I/O 완료 포트 큐가 있다.

// 1. 메시지 큐(Message Queue) : 메시지와 같이 애플리케이션 간 통신과 내부 이벤트 처리를 담당한다.
// - 키보드 입력, 마우스 클릭, 윈도우 크기 변경 등의 이벤트 역할을 한다.

// 2. 프린터 큐(Print Queue) : 인쇄 작업 관리를 담당한다. 먼저 입력된 인쇄 명령부터 하나씩 꺼내어 프린터로 전송한다.

// 3. 작업 큐(Job Queue) : 다양한 시스템 작업이나 백그라운드 작업을 예약 및 관리한다. 특정 조건이나 시간에 작업을 실행하도록 스케줄링한다.
// - 백업, 디스크 검사 등을 예약하고 관리

// 4. 스레드 풀 큐(Thread Pool Queue) : 스레드 생성과 관리를 처리한다.

// 5. I/O 완료 포트(Input/Output Completion Port) : 비동기 I/O 작업의 완료 상태를 큐에 넣고, 워커 스레드가 완료된 작업을 꺼내어 후속처리를 한다.
// - 고성능 서버 애플리케이션에서 비동기 네트워크 I/O 작업을 처리하는 데 사용


// 테스크(Task) : 비동기 프로그래밍 모델의 일환으로, 비동기 작업을 더 쉽게 관리하고 실행할 수 있도록 도와준다.
// 스레드(Thread) : 어떠한 프로그램 내에서 실행되는 흐름의 단위. 일반적으로 한 프로그램은 하나의 스레드를 가지고 있지만, 프로그램 환경에 따라 둘 이상의 스레드를 동시에 실행할 수 있다.
// 이때 하나의 스레드를 싱글 스레드(Single Thread), 둘 이상의 스레드를 멀티 스레드(Multi Thread)라고 한다.

// 싱글 스레드(Single Thread) : 하나의 프로세스를 하나의 스레드로 동작
// 장점 : 프로그래밍 난이도가 쉬우며 메모리를 적게 사용하고 자원 접근에 대한 동기화 걱정이 없다.
// 단점 : 여러 개의 CPU를 활용하지 못하여 연산량이 많은 작업을 하는 경우 상대적으로 처리가 늦다. 에러 처리를 못하는 경우 멈추게 된다.(멀티 스레드의 경우 새로운 스레드 생성으로 이를 해결한다)

// 멀티 스레드(Multi Thread) : 하나의 프로세스를 둘 이상의 스레드로 동작
// 장점 : 싱글 스레드와 달리 작업 중에도 실시간으로 사용자에게 응답이 가능하다. 한 프로세스를 여러 프로세스에서 수행할 수 있다.
// 단점 : 설계가 까다로우며 자원 공유의 문제가 발생한다. 문맥 교환(다른 테스크가 시작할 수 있도록 이미 실행 중인 테스크를 멈추는 것) 작업을 요구한다.